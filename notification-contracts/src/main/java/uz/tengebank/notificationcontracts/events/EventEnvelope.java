package uz.tengebank.notificationcontracts.events;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import lombok.*;
import uz.tengebank.notificationcontracts.payload.Payload;
import uz.tengebank.notificationcontracts.utils.EventEnvelopeDeserializer;

import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * A generic wrapper for all events published in the system.
 * It contains common metadata about the event and the specific payload,
 * which is determined at runtime by the 'eventType' field.
 */
@Getter
@Setter
@ToString
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonDeserialize(using = EventEnvelopeDeserializer.class)
public class EventEnvelope {

    /**
     * A unique identifier for this specific event instance.
     * Generated by the publisher for each event.
     * (e.g., "e8a3b1c9-6d2f-4a8e-9b1c-3d2f1a8e9b1c")
     */
    private UUID eventId;

    /**
     * The specific type of the event. This string is used by consumers
     * to understand how to process the payload.
     * It must match a constant from the EventTypes class.
     * (e.g., "notification.request.accepted.v1")
     */
    private String eventType;

    /**
     * The version of the event payload's schema. Useful for versioning
     * and evolving events over time without breaking consumers.
     * (e.g., "1.0")
     */
    private String version;

    /**
     * The name of the microservice that originally published the event.
     * (e.g., "notification-gateway-service, notification-template-service, notification-sms-service")
     */
    private String sourceService;

    /**
     * The precise, timezone-aware timestamp of when the event occurred.
     * Using OffsetDateTime ensures global consistency.
     * (e.g., "2025-06-30T10:30:00.123Z")
     */
    private OffsetDateTime eventTimestamp;

    /**
     * The actual data payload, specific to the event type. Jackson will
     * use the 'eventType' field to deserialize this into the correct
     * concrete class (e.g., NotificationRequestAccepted).
     */
    private Payload payload;
}
